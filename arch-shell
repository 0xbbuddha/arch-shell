#!/bin/bash

# =============================================
# Script : arch-shell
# Description : Gestion des environnements Arch Linux
# Auteur : Killian Prin-abeil <killian@archimedeos.org>
# Date : $(date +%Y-%m-%d)
# =============================================

set -euo pipefail

ARCHSHELL_DIR="${HOME}/.arch-shell"
ARCHSHELL_STORE="${ARCHSHELL_DIR}/store"
BASE_TEMPLATE="${ARCHSHELL_STORE}/base-template"

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

spinner() {
  local pid=$1
  local msg="$2"
  local spinstr='|/-\\'
  local i=0
  tput civis
  while kill -0 $pid 2>/dev/null; do
    i=$(( (i+1) %4 ))
    printf "\r${YELLOW}[*] %s %s${NC}" "${spinstr:$i:1}" "$msg"
    sleep 0.1
  done
  printf "\r${GREEN}[*] %s terminé !${NC}\n" "$msg"
  tput cnorm
}

usage() {
    echo "Usage: $0 init | regen-base | create <env> | -S <env> <pkg...> | -R <env> <pkg...> | enter <env> | delete <env> | list | info <env> | export <env> <file> | import <file> <env> | run <env> <command> [options]"
    echo ""
    echo "Options pour 'run':"
    echo "  --script <file>     Exécuter un script dans l'environnement"
    echo "  --env <VAR=value>   Définir une variable d'environnement"
    echo ""
    echo "Exemples:"
    echo "  $0 run mon-env \"ls -la\""
    echo "  $0 run mon-env --script build.sh"
    echo "  $0 run mon-env --env DEBUG=1 \"./mon-programme\""
    exit 1
}

update_env_info() {
    local envname="$1"
    local envdir="${ARCHSHELL_DIR}/${envname}"
    local infofile="${envdir}/.arch-shell-env"
    
    cat > "$infofile" << EOF
{
  "name": "$envname",
  "created": "$(date -Iseconds)",
  "last_used": "$(date -Iseconds)",
  "packages": [],
  "arch": "$(uname -m)"
}
EOF
}

update_last_used() {
    local envname="$1"
    local infofile="${ARCHSHELL_DIR}/${envname}/.arch-shell-env"
    if [ -f "$infofile" ]; then
        if command -v jq >/dev/null 2>&1; then
            jq ".last_used = \"$(date -Iseconds)\"" "$infofile" > "${infofile}.tmp" && mv "${infofile}.tmp" "$infofile"
        else
            sed -i "s/\"last_used\": \"[^\"]*\"/\"last_used\": \"$(date -Iseconds)\"/" "$infofile"
        fi
    fi
}

add_package() {
    local envname="$1"
    local package="$2"
    local infofile="${ARCHSHELL_DIR}/${envname}/.arch-shell-env"
    
    if [ -f "$infofile" ]; then
        if command -v jq >/dev/null 2>&1; then
            jq ".packages += [\"$package\"]" "$infofile" > "${infofile}.tmp" && mv "${infofile}.tmp" "$infofile"
        else
            sed -i "s/\"packages\": \[\([^]]*\)\]/\"packages\": [\1, \"$package\"]/" "$infofile"
        fi
    fi
}

remove_package() {
    local envname="$1"
    local package="$2"
    local infofile="${ARCHSHELL_DIR}/${envname}/.arch-shell-env"
    
    if [ -f "$infofile" ]; then
        if command -v jq >/dev/null 2>&1; then
            jq ".packages -= [\"$package\"]" "$infofile" > "${infofile}.tmp" && mv "${infofile}.tmp" "$infofile"
        else
            sed -i "s/\"$package\",\?//g; s/,\s*]/]/g; s/\[,/[/g" "$infofile"
        fi
    fi
}

check_package_in_env() {
    local envname="$1"
    local package="$2"
    local infofile="${ARCHSHELL_DIR}/${envname}/.arch-shell-env"
    
    if [ -f "$infofile" ]; then
        if command -v jq >/dev/null 2>&1; then
            jq -e ".packages | index(\"$package\")" "$infofile" >/dev/null 2>&1
        else
            grep -q "\"$package\"" "$infofile"
        fi
    else
        return 1
    fi
}

export_env() {
    local envname="$1"
    local export_file="$2"
    local envdir="${ARCHSHELL_DIR}/${envname}"
    local infofile="${envdir}/.arch-shell-env"
    
    if [ ! -d "$envdir" ]; then
        echo -e "${RED}[!] Environnement inexistant : ${envname}${NC}"
        return 1
    fi
    
    if [ ! -f "$infofile" ]; then
        echo -e "${RED}[!] Fichier de métadonnées manquant : ${infofile}${NC}"
        return 1
    fi
    
    if [ -d "$export_file" ]; then
        echo -e "${RED}[!] Le fichier d'export ne peut pas être un répertoire : ${export_file}${NC}"
        echo -e "${YELLOW}[?] Utilisez un nom de fichier comme : ${envname}-backup.tar.gz${NC}"
        return 1
    fi
    
    if [ -f "$export_file" ]; then
        echo -e "${YELLOW}[?] Le fichier ${export_file} existe déjà${NC}"
        read -p "Écraser le fichier existant ? [o/N] " -r
        if [[ ! $REPLY =~ ^[oOyY]$ ]]; then
            echo -e "${YELLOW}[!] Export annulé${NC}"
            return 1
        fi
    fi
    
    export_file=$(realpath "$export_file" 2>/dev/null || echo "$export_file")
    
    local temp_dir
    temp_dir=$(mktemp -d)
    local export_dir="${temp_dir}/export"
    mkdir -p "$export_dir"
    
    echo -e "${BLUE}[*] Préparation de l'export de ${envname}...${NC}"
    
    cp "$infofile" "${export_dir}/arch-shell-env.json"
    
    cat > "${export_dir}/metadata.json" << EOF
{
  "arch_shell_version": "$(grep -o 'v[0-9]\+\.[0-9]\+\.[0-9]\+' "$0" 2>/dev/null || echo 'unknown')",
  "export_date": "$(date -Iseconds)",
  "environment_name": "$envname",
  "exported_by": "$(whoami)",
  "hostname": "$(hostname)",
  "arch": "$(uname -m)"
}
EOF
    
    local total_size
    total_size=$(sudo du -sb "$envdir" | awk '{print $1}')
    echo -e "${BLUE}[*] Création de l'archive ($(numfmt --to=iec $total_size))...${NC}"
    
    (
        cd "$envdir"
        sudo tar cf - . | gzip > "${export_dir}/environment.tar.gz"
    ) &
    spinner $! "Compression de l'environnement"
    
    echo -e "${BLUE}[*] Finalisation de l'export...${NC}"
    (
        cd "$temp_dir"
        tar czf "$export_file" export/
    ) &
    spinner $! "Création de l'archive finale"
    
    local checksum
    checksum=$(sha256sum "$export_file" | awk '{print $1}')
    
    rm -rf "$temp_dir"
    
    echo -e "${GREEN}[*] Export terminé : ${export_file}${NC}"
    echo -e "${GREEN}[*] Checksum SHA256 : ${checksum}${NC}"
    
    local archive_size
    archive_size=$(du -h "$export_file" | awk '{print $1}')
    echo -e "${GREEN}[*] Taille de l'archive : ${archive_size}${NC}"
}

import_env() {
    local import_file="$1"
    local envname="$2"
    local envdir="${ARCHSHELL_DIR}/${envname}"
    
    if [ ! -f "$import_file" ]; then
        echo -e "${RED}[!] Fichier d'import inexistant : ${import_file}${NC}"
        return 1
    fi
    
    if [ -d "$envdir" ]; then
        echo -e "${RED}[!] L'environnement ${envname} existe déjà${NC}"
        echo -e "${YELLOW}[?] Utilisez 'arch-shell delete ${envname}' pour le supprimer d'abord${NC}"
        return 1
    fi
    
    local temp_dir
    temp_dir=$(mktemp -d)
    
    echo -e "${BLUE}[*] Vérification de l'archive...${NC}"
    
    if ! tar xzf "$import_file" -C "$temp_dir" 2>/dev/null; then
        echo -e "${RED}[!] Erreur lors de l'extraction de l'archive${NC}"
        rm -rf "$temp_dir"
        return 1
    fi
    
    local export_dir="${temp_dir}/export"
    if [ ! -d "$export_dir" ]; then
        echo -e "${RED}[!] Format d'archive invalide${NC}"
        rm -rf "$temp_dir"
        return 1
    fi
    
    if [ ! -f "${export_dir}/metadata.json" ] || [ ! -f "${export_dir}/arch-shell-env.json" ] || [ ! -f "${export_dir}/environment.tar.gz" ]; then
        echo -e "${RED}[!] Archive incomplète ou corrompue${NC}"
        rm -rf "$temp_dir"
        return 1
    fi
    
    echo -e "${BLUE}[*] Informations de l'archive :${NC}"
    if command -v jq >/dev/null 2>&1; then
        echo -e "${BLUE}    Archive :${NC} $(jq -r '.export_date' "${export_dir}/metadata.json")"
        echo -e "${BLUE}    Environnement :${NC} $(jq -r '.environment_name' "${export_dir}/metadata.json")"
        echo -e "${BLUE}    Exporté par :${NC} $(jq -r '.exported_by' "${export_dir}/metadata.json")"
    fi
    
    echo -e "${BLUE}[*] Import de l'environnement ${envname}...${NC}"
    
    mkdir -p "$envdir"
    
    (
        cd "$envdir"
        gzip -dc "${export_dir}/environment.tar.gz" | sudo tar xf -
    ) &
    spinner $! "Extraction de l'environnement"
    
    cp "${export_dir}/arch-shell-env.json" "${envdir}/.arch-shell-env"
    
    sudo chown -R $USER: "$envdir"
    
    update_last_used "$envname"

    rm -rf "$temp_dir"
    
    echo -e "${GREEN}[*] Import terminé : environnement ${envname} créé${NC}"
}

run_command() {
    local envname="$1"
    local command=""
    local script_file=""
    local env_vars=""
    
    shift 1
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --script)
                script_file="$2"
                shift 2
                ;;
            --env)
                env_vars="$env_vars $2"
                shift 2
                ;;
            *)
                if [ -z "$command" ]; then
                    command="$1"
                else
                    command="$command $1"
                fi
                shift
                ;;
        esac
    done
    
    local envdir="${ARCHSHELL_DIR}/${envname}"
    
    if [ ! -d "$envdir" ]; then
        echo -e "${RED}[!] Environnement inexistant : ${envname}${NC}"
        return 1
    fi
    
    update_last_used "$envname"
    
    if [ -n "$script_file" ]; then
        if [ ! -f "$script_file" ]; then
            echo -e "${RED}[!] Script inexistant : ${script_file}${NC}"
            return 1
        fi
        
        echo -e "${BLUE}[*] Exécution du script ${script_file} dans ${envname}...${NC}"
        
        local script_name=$(basename "$script_file")
        sudo mkdir -p "${envdir}/root"
        sudo cp "$script_file" "${envdir}/root/${script_name}"
        sudo chmod +x "${envdir}/root/${script_name}"
        
        sudo arch-nspawn -c /var/cache/pacman/pkg "$envdir" /bin/bash -c "cd /root && ./${script_name}"
        local exit_code=$?
        
        sudo rm -f "${envdir}/root/${script_name}"
        
        if [ $exit_code -eq 0 ]; then
            echo -e "${GREEN}[*] Script exécuté avec succès${NC}"
        else
            echo -e "${RED}[!] Script terminé avec le code d'erreur ${exit_code}${NC}"
        fi
        
        return $exit_code
    else
        if [ -z "$command" ]; then
            echo -e "${RED}[!] Aucune commande spécifiée${NC}"
            return 1
        fi
        
        echo -e "${BLUE}[*] Exécution de '${command}' dans ${envname}...${NC}"
        
        if [ -n "$env_vars" ]; then
            # Avec variables d'environnement
            sudo arch-nspawn -c /var/cache/pacman/pkg "$envdir" /bin/bash -c "export $env_vars >/dev/null 2>&1; $command"
        else
            # Sans variables d'environnement
            sudo arch-nspawn -c /var/cache/pacman/pkg "$envdir" /bin/bash -c "$command"
        fi
        
        local exit_code=$?
        
        if [ $exit_code -eq 0 ]; then
            echo -e "${GREEN}[*] Commande exécutée avec succès${NC}"
        else
            echo -e "${RED}[!] Commande terminée avec le code d'erreur ${exit_code}${NC}"
        fi
        
        return $exit_code
    fi
}

if [ $# -lt 1 ]; then
    usage
fi

case "$1" in
  init)
    mkdir -p "$ARCHSHELL_STORE"
    if [ -d "$BASE_TEMPLATE" ]; then
      echo "Template de base existe déjà. Utilisez 'regen-base' pour le régénérer."
    else
      echo -e "${BLUE}[*] Création du template de base...${NC}"
      (
        sudo mkarchroot "$BASE_TEMPLATE" base > /dev/null 2>&1
      ) &
      spinner $! "Création du template de base"
      echo -e "${GREEN}[*] Template de base créé.${NC}"
    fi
    ;;
  regen-base)
    mkdir -p "$ARCHSHELL_STORE"
    echo -e "${BLUE}[*] Régénération du template de base...${NC}"
    if [ -d "$BASE_TEMPLATE" ]; then
      sudo rm -rf "$BASE_TEMPLATE"
    fi
    (
      sudo mkarchroot "$BASE_TEMPLATE" base > /dev/null 2>&1
    ) &
    spinner $! "Régénération du template de base"
    echo -e "${GREEN}[*] Template de base régénéré.${NC}"
    ;;
  create)
    if [ $# -lt 2 ]; then
      echo "Usage: $0 create <env>"
      exit 1
    fi
    ENVNAME="$2"
    if [ ! -d "$BASE_TEMPLATE" ]; then
      echo "Template de base introuvable. Exécutez d'abord '$0 init'."
      exit 2
    fi
    if [ -d "${ARCHSHELL_DIR}/${ENVNAME}" ]; then
      echo "L'environnement ${ENVNAME} existe déjà."; exit 5;
    fi
    echo -e "${BLUE}[*] Création de l'environnement $ENVNAME à partir du template...${NC}"
    mkdir -p "${ARCHSHELL_DIR}/${ENVNAME}"
    total=$(sudo du -sb "$BASE_TEMPLATE" | awk '{print $1}')
    (
      n=0
      sudo tar cf - -C "$BASE_TEMPLATE" . | \
      sudo tar xf - -C "${ARCHSHELL_DIR}/${ENVNAME}"
    ) 2> >(grep -v 'socket ignorée' >&2) &
    spinner $! "Copie du template"
    sudo chown -R $USER: "${ARCHSHELL_DIR}/${ENVNAME}"
    update_env_info "$ENVNAME"
    echo -e "${GREEN}[*] Environnement $ENVNAME créé.${NC}"
    ;;
  -S)
    if [ $# -lt 3 ]; then
      echo "Usage: $0 -S <env> <pkg...>"
      exit 1
    fi
    ENVNAME="$2"
    shift 2
    if [ ! -d "${ARCHSHELL_DIR}/${ENVNAME}" ]; then
      echo "Environnement inexistant : ${ENVNAME}"; exit 3;
    fi
    echo -e "${BLUE}[*] Installation de(s) paquet(s) $* dans $ENVNAME...${NC}"
    (
      sudo arch-nspawn -c /var/cache/pacman/pkg "${ARCHSHELL_DIR}/${ENVNAME}" pacman -S --noconfirm "$@" > /dev/null 2>&1
    ) &
    spinner $! "Installation des paquets"
    echo -e "${GREEN}[*] Installation terminée.${NC}"
    update_last_used "$ENVNAME"
    for pkg in "$@"; do
      add_package "$ENVNAME" "$pkg"
    done
    ;;
  -R)
    if [ $# -lt 3 ]; then
      echo "Usage: $0 -R <env> <pkg...>"
      exit 1
    fi
    ENVNAME="$2"
    shift 2
    if [ ! -d "${ARCHSHELL_DIR}/${ENVNAME}" ]; then
      echo "Environnement inexistant : ${ENVNAME}"; exit 3;
    fi
    
    missing_packages=()
    for pkg in "$@"; do
      if ! check_package_in_env "$ENVNAME" "$pkg"; then
        missing_packages+=("$pkg")
      fi
    done
    
    if [ ${#missing_packages[@]} -gt 0 ]; then
      echo -e "${RED}[!] Les paquets suivants ne sont pas installés dans l'environnement ${ENVNAME} :${NC}"
      for pkg in "${missing_packages[@]}"; do
        echo "  - $pkg"
      done
      echo -e "${YELLOW}[!] Seuls les paquets présents dans .arch-shell-env peuvent être supprimés.${NC}"
      exit 4
    fi
    
    echo -e "${BLUE}[*] Suppression de(s) paquet(s) $* dans $ENVNAME...${NC}"
    (
      sudo arch-nspawn -c /var/cache/pacman/pkg "${ARCHSHELL_DIR}/${ENVNAME}" pacman -R --noconfirm "$@" > /dev/null 2>&1
    ) &
    spinner $! "Suppression des paquets"
    echo -e "${GREEN}[*] Suppression terminée.${NC}"
    update_last_used "$ENVNAME"
    for pkg in "$@"; do
      remove_package "$ENVNAME" "$pkg"
    done
    ;;
  enter)
    if [ $# -lt 2 ]; then
      echo "Usage: $0 enter <env>"
      exit 1
    fi
    ENVNAME="$2"
    if [ ! -d "${ARCHSHELL_DIR}/${ENVNAME}" ]; then
      echo "Environnement inexistant : ${ENVNAME}"; exit 3;
    fi
    echo "Entrée dans l'environnement $ENVNAME."
    update_last_used "$ENVNAME"
    sudo arch-nspawn -c /var/cache/pacman/pkg "${ARCHSHELL_DIR}/${ENVNAME}"
    ;;
  delete)
    if [ $# -lt 2 ]; then
      echo "Usage: $0 delete <env>"
      exit 1
    fi
    ENVNAME="$2"
    if [ ! -d "${ARCHSHELL_DIR}/${ENVNAME}" ]; then
      echo "Environnement inexistant : ${ENVNAME}"; exit 3;
    fi
    read -p "Supprimer définitivement ${ENVNAME} ? [o/N] " REP
    if [[ "$REP" =~ ^[oOyY]$ ]]; then
      sudo rm -rf "${ARCHSHELL_DIR}/${ENVNAME}"
      LOCKFILE="${ARCHSHELL_DIR}/${ENVNAME}.lock"
      if [ -f "$LOCKFILE" ]; then
        sudo rm -f "$LOCKFILE"
      fi
      echo "Environnement supprimé."
    else
      echo "Annulé."
    fi
    ;;
  list)
    echo "Environnements disponibles :"
    for env in "$ARCHSHELL_DIR"/*; do
      [ -d "$env" ] || continue
      [ "$(basename "$env")" = "store" ] && continue
      if [ -f "$env/.arch-shell-env" ]; then
        echo "- $(basename "$env")"
      fi
    done
    ;;
  info)
    if [ $# -lt 2 ]; then
      echo "Usage: $0 info <env>"
      exit 1
    fi
    ENVNAME="$2"
    INFOFILE="${ARCHSHELL_DIR}/${ENVNAME}/.arch-shell-env"
    if [ ! -f "$INFOFILE" ]; then
      echo "Environnement inexistant : ${ENVNAME}"; exit 3;
    fi
    echo "Informations sur l'environnement $ENVNAME :"
    if command -v jq >/dev/null 2>&1; then
      jq '.' "$INFOFILE"
    else
      cat "$INFOFILE"
    fi
    ;;
  export)
    if [ $# -lt 3 ]; then
      echo "Usage: $0 export <env> <file>"
      exit 1
    fi
    ENVNAME="$2"
    EXPORT_FILE="$3"
    export_env "$ENVNAME" "$EXPORT_FILE"
    ;;
  import)
    if [ $# -lt 3 ]; then
      echo "Usage: $0 import <file> <env>"
      exit 1
    fi
    IMPORT_FILE="$2"
    ENVNAME="$3"
    import_env "$IMPORT_FILE" "$ENVNAME"
    ;;
  run)
    if [ $# -lt 2 ]; then
      echo "Usage: $0 run <env> <command> [options]"
      exit 1
    fi
    ENVNAME="$2"
    shift 2
    run_command "$ENVNAME" "$@"
    ;;
  *)
    usage
    ;;
esac